.row.mb-3
  .col-sm-12
    .map-container
      #map{ style: "height: 400px", 'data-apikey': ENV['MAPTILER_API_KEY'] }

=turbo_frame_tag "entry_form" do
  =simple_form_for [@event, @entry] do |f|
    =f.hidden_field :entry_type
    =f.hidden_field :latitude
    =f.hidden_field :longitude
    =f.hidden_field :token, value: params[:token]

    =f.input :location
    =f.input :name
    -if method == :new
      =f.input :email
    =f.input :direction, as: :select,
      collection: Entry::DIRECTIONS.map { |v| [t(v), v] },
      default: @entry.direction,
      label: t('simple_form.labels.entry.direction'),
      hint: t('simple_form.hints.entry.direction')
    =f.input :transport, as: :select,
      collection: @transport_types.map { |v| [t("transport.#{v}"), v] },
      include_blank: @entry.is_offer?,
      blank: t('simple_form.labels.entry.transport'),
      label: t('simple_form.labels.entry.transport'),
      hint: t('simple_form.hints.entry.transport')
    .collapse#carInputs
      =f.input :driver, as: :boolean,
        label: @entry.is_offer? ? t('simple_form.labels.entry.driver-needed') : t('simple_form.labels.entry.driver-offer'),
        hint: @entry.is_offer? ? t('simple_form.hints.entry.driver-needed') : t('simple_form.hints.entry.driver-offer')
      =f.input :seats,
        hint: @entry.is_offer? ? t('simple_form.hints.entry.seats-available') : t('simple_form.hints.entry.seats-needed')
    =f.input :date,
      as: :string,
      input_html: { value: @entry.date&.strftime('%d/%m/%Y %H:%M') }
    =f.input :notes, input_html: { rows: 5 }

    -if method == :new
      .row.mb-3
        .col-sm-3
        .col-sm-9
          =render 'altcha/widget',
            label: terms_and_conditions_prompt,
            verified: terms_and_conditions_accepted,
            error: @entry.errors[:altcha].any?
          =f.error :altcha, class: 'altcha-error'

    .row.mb-3
      .col-sm-3
      .col-sm-9.col-lg-3
        =f.submit submit_text, class: 'btn btn-primary w-100 mt-1'

      .col-sm-9.col-lg-3
        -if method == :new
          =link_to t('cancel'), event_entries_path(@event, entry_type: @entry.entry_type, direction: @entry.direction),
            class: 'btn btn-default btn-light w-100 mt-1', role: 'button'
        -else
          =link_to t('entry_delete.title'),
            event_entry_destroy_path(@entry.event, @entry, token: params[:token], method: :delete),
            class: 'btn btn-default btn-danger w-100 mt-1',
            role: 'button',
            data: { turbo_method: :delete, turbo_confirm: t('entry_delete.confirmation') }

:javascript
  init_entry_timepicker = (e) => {
    const date = document.getElementById('entry_date');

    if (date !== null) {
      new tempusDominus.TempusDominus(date, {
        restrictions: {
          minDate: new Date(),
          maxDate: new Date('#{ escape_javascript(@event.end_date) }'),
        },
        localization: {
          locale: '#{ I18n.locale }',
          format: 'dd/MM/yyyy HH:mm',
        },
      });
    }
  };

  document.addEventListener('turbo:load', init_entry_timepicker);
  document.addEventListener('turbo:frame-load', init_entry_timepicker);

  init_collapse = () => {
    const carInputsElement = document.getElementById('carInputs');
    const transportSelect = document.getElementById('entry_transport');

    if (carInputsElement !== null && transportSelect !== null) {
      const carInputsCollapse = new bootstrap.Collapse(carInputsElement, { toggle: false });

      const callback = () => {
        if (transportSelect.value === 'car') {
          carInputsCollapse.show();
        } else {
          carInputsCollapse.hide();
        }
      };

      transportSelect.addEventListener('change', callback);
      callback();
    }
  };

  document.addEventListener('turbo:load', init_collapse);
  document.addEventListener('turbo:frame-load', init_collapse);
